# H200 Intelligent Mug Positioning System - Pylint Configuration
# Production-grade Python linting standards

[MASTER]

# Python code to execute, usually for sys.path manipulation
init-hook='import sys; sys.path.append(".")'

# Use multiple processes to speed up Pylint
jobs=0

# List of plugins
load-plugins=
    pylint.extensions.check_elif,
    pylint.extensions.bad_builtin,
    pylint.extensions.docparams,
    pylint.extensions.for_any_all,
    pylint.extensions.set_membership,
    pylint.extensions.code_style,
    pylint.extensions.overlapping_exceptions,
    pylint.extensions.typing,
    pylint.extensions.redefined_variable_type,
    pylint.extensions.comparison_placement,
    pylint.extensions.mccabe

# Pickle collected data for later comparisons
persistent=yes

# Minimum Python version to use for version dependent checks
py-version=3.11

# Discover python modules and packages in the file system subtree
recursive=yes

[MESSAGES CONTROL]

# Enable all messages by default
enable=all

# Disable specific messages
disable=
    too-few-public-methods,
    too-many-instance-attributes,
    too-many-arguments,
    too-many-locals,
    too-many-branches,
    too-many-statements,
    too-many-public-methods,
    duplicate-code,
    fixme,
    import-outside-toplevel,
    cyclic-import,
    unnecessary-pass,
    logging-fstring-interpolation,
    consider-using-from-import

[REPORTS]

# Set the output format
output-format=colorized

# Include message's id in output
include-ids=yes

# Include symbolic ids of messages in output
symbol=yes

# Put messages in a separate file for each module
files-output=no

# Tells whether to display a full report
reports=yes

# Activate the evaluation score
evaluation=10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)

[REFACTORING]

# Maximum number of nested blocks for function / method body
max-nested-blocks=5

# Complete name of functions that never returns
never-returning-functions=sys.exit,argparse.parse_error

[LOGGING]

# The type of string formatting that logging methods do
logging-format-style=new

# Logging modules to check that the string format arguments are in logging function parameter format
logging-modules=logging,structlog

[SPELLING]

# Limits count of emitted suggestions for spelling mistakes
max-spelling-suggestions=4

# Spelling dictionary name
spelling-dict=en_US

[MISCELLANEOUS]

# List of note tags to take in consideration
notes=FIXME,XXX,TODO,HACK,BUG,OPTIMIZE,DEPRECATED

[TYPECHECK]

# List of decorators that produce context managers
contextmanager-decorators=contextlib.contextmanager,contextlib.asynccontextmanager

# List of members which are set dynamically
generated-members=torch.*,cv2.*

# List of decorators that produce properties
property-classes=abc.abstractproperty,functools.cached_property

# Missing member checks for opaque objects
missing-member-hint=yes
missing-member-hint-distance=1
missing-member-max-choices=1

# Regex pattern to define which classes are considered mixins
mixin-class-rgx=.*[Mm]ixin

# List of class names for which member attributes should not be checked
ignored-classes=optparse.Values,thread._local,_thread._local,torch.nn.Module

# List of module names for which member attributes should not be checked
ignored-modules=torch,torchvision,cv2,numpy,pandas,ultralytics,transformers

[VARIABLES]

# Additional names that should be defined in builtins
additional-builtins=

# Whether unused global variables should be treated as a violation
allow-global-unused-variables=yes

# List of names allowed to shadow builtins
allowed-redefined-builtins=

# List of strings which can identify a callback function by name
callbacks=cb_,_cb

# A regular expression matching the name of dummy variables
dummy-variables-rgx=_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_

# Argument names that match this expression will be ignored
ignored-argument-names=_.*|^ignored_|^unused_

# Tells whether we should check for unused import in __init__ files
init-import=no

# List of qualified module names which can have objects that can redefine builtins
redefining-builtins-modules=six.moves,past.builtins,future.builtins,builtins,io

[FORMAT]

# Expected format of line ending
expected-line-ending-format=LF

# Regexp for a line that is allowed to be longer than the limit
ignore-long-lines=^\s*(# )?<?https?://\S+>?$

# Number of spaces of indent required inside a hanging or continued line
indent-after-paren=4

# String used as indentation unit
indent-string='    '

# Maximum number of characters on a single line
max-line-length=120

# Maximum number of lines in a module
max-module-lines=2000

# Allow the body of a class to be on the same line as the declaration
single-line-class-stmt=no

# Allow the body of an if to be on the same line as the test
single-line-if-stmt=no

[SIMILARITIES]

# Comments are removed from the similarity computation
ignore-comments=yes

# Docstrings are removed from the similarity computation
ignore-docstrings=yes

# Imports are removed from the similarity computation
ignore-imports=yes

# Signatures are removed from the similarity computation
ignore-signatures=yes

# Minimum lines number of a similarity
min-similarity-lines=4

[DESIGN]

# Maximum number of arguments for function / method
max-args=10

# Maximum number of locals for function / method body
max-locals=20

# Maximum number of return / yield for function / method body
max-returns=6

# Maximum number of branch for function / method body
max-branches=15

# Maximum number of statements in function / method body
max-statements=60

# Maximum number of parents for a class (see R0901)
max-parents=7

# List of interface methods to ignore
defining-attr-methods=__init__,__new__,setUp,asyncSetUp

# Maximum number of public methods for a class
max-public-methods=25

# Maximum number of boolean expressions in an if statement
max-bool-expr=5

[CLASSES]

# Warn about protected attribute access inside special methods
check-protected-access-in-special-methods=no

# List of valid names for the first argument in a class method
valid-classmethod-first-arg=cls

# List of valid names for the first argument in a metaclass class method
valid-metaclass-classmethod-first-arg=mcs

[IMPORTS]

# Deprecated modules which should not be used
deprecated-modules=

# Output a graph (.gv or any supported image format) of external dependencies
ext-import-graph=

# Output a graph (.gv or any supported image format) of all dependencies
import-graph=

# Output a graph (.gv or any supported image format) of internal dependencies
int-import-graph=

# Force import order to recognize a module as part of the standard library
known-standard-library=

# Force import order to recognize a module as part of a third party library
known-third-party=

# Couples of modules and preferred modules, separated by a comma
preferred-modules=

[EXCEPTIONS]

# Exceptions that will emit a warning when caught
overgeneral-exceptions=builtins.BaseException,builtins.Exception

[BASIC]

# Naming style matching correct argument names
argument-naming-style=snake_case

# Naming style matching correct attribute names
attr-naming-style=snake_case

# Bad variable names which should always be refused
bad-names=foo,bar,baz,toto,tutu,tata

# Naming style matching correct class attribute names
class-attribute-naming-style=any

# Naming style matching correct class constant names
class-const-naming-style=UPPER_CASE

# Naming style matching correct class names
class-naming-style=PascalCase

# Naming style matching correct constant names
const-naming-style=UPPER_CASE

# Minimum line length for functions/classes that require docstrings
docstring-min-length=-1

# Naming style matching correct function names
function-naming-style=snake_case

# Good variable names which should always be accepted
good-names=i,j,k,ex,Run,_,id,x,y,z,w,h,c,n,m,p,q,r,s,t,u,v,ok,fp,tp,fn,tn,lr,ip

# Naming style matching correct inline iteration names
inlinevar-naming-style=any

# Naming style matching correct method names
method-naming-style=snake_case

# Naming style matching correct module names
module-naming-style=snake_case

# Regular expression matching correct module names
module-rgx=(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$

# Colon-delimited sets of names that determine each other's naming style
name-group=

# Regular expression which should only match function or class names that do not require a docstring
no-docstring-rgx=^_

# List of decorators that produce properties
property-classes=abc.abstractproperty

# Naming style matching correct variable names
variable-naming-style=snake_case

[EXTENSIONS]

# Maximum complexity of McCabe
max-complexity=10