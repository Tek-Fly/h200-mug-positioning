[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "h200-mug-positioning"
version = "1.0.0"
description = "H200 Intelligent Mug Positioning System - AI-powered mug placement optimization"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "Tekfly Ltd", email = "support@tekfly.co.uk"},
]
keywords = ["ai", "computer-vision", "gpu", "mug-positioning", "yolo", "clip"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Image Recognition",
]

[project.urls]
Homepage = "https://github.com/Tek-Fly/h200-mug-positioning"
Documentation = "https://github.com/Tek-Fly/h200-mug-positioning/tree/main/docs"
Repository = "https://github.com/Tek-Fly/h200-mug-positioning.git"
Issues = "https://github.com/Tek-Fly/h200-mug-positioning/issues"

[tool.setuptools]
packages = ["src"]
include-package-data = true

[tool.setuptools.package-data]
"src" = ["**/*.json", "**/*.yaml", "**/*.yml"]

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true
implicit_reexport = false
show_error_codes = true
show_column_numbers = true
pretty = true
namespace_packages = true
explicit_package_bases = true

# Per-module options
[[tool.mypy.overrides]]
module = [
    "torch.*",
    "torchvision.*",
    "PIL.*",
    "cv2.*",
    "ultralytics.*",
    "transformers.*",
    "clip.*",
    "redis.*",
    "motor.*",
    "aioboto3.*",
    "google.cloud.*",
]
ignore_missing_imports = true

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | __pycache__
  | dashboard
  | docs
)/
'''

[tool.isort]
profile = "black"
line_length = 88
known_first_party = ["src"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
import_heading_stdlib = "Standard library imports"
import_heading_thirdparty = "Third-party imports"
import_heading_firstparty = "First-party imports"
import_heading_localfolder = "Local imports"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=85",
]
testpaths = ["tests"]
pythonpath = ["."]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
    "performance: Performance tests",
    "gpu: Tests requiring GPU",
    "external: Tests requiring external services",
    "slow: Slow running tests",
]

[tool.coverage.run]
source = ["src"]
branch = true
parallel = true
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/site-packages/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
precision = 2
show_missing = true
skip_covered = false

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"