name: Tests and Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements-dev.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    
    - name: Check code formatting with black
      run: |
        black --check --diff src/ tests/
    
    - name: Lint with pylint
      run: |
        pylint src/ --rcfile=.pylintrc --exit-zero --output-format=github
    
    - name: Type check with mypy
      run: |
        mypy src/ --config-file=pyproject.toml
    
    - name: Lint with flake8
      run: |
        flake8 src/ --config=.flake8 --format=github

  test:
    name: Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-type: [unit, integration, e2e]
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements-dev.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    
    - name: Start test services
      run: |
        docker-compose -f docker-compose.test.yml up -d mongo-test redis-test
        sleep 10  # Wait for services to be ready
    
    - name: Run ${{ matrix.test-type }} tests
      run: |
        python tests/test_runner.py ${{ matrix.test-type }} --html
      env:
        TESTING: true
        MONGODB_ATLAS_URI: mongodb://localhost:27018/test_h200
        REDIS_HOST: localhost
        REDIS_PORT: 6380
        REDIS_PASSWORD: test_password
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.test-type }}
        path: |
          reports/
          coverage.xml
          htmlcov/
    
    - name: Stop test services
      if: always()
      run: |
        docker-compose -f docker-compose.test.yml down

  coverage:
    name: Coverage Report
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    
    - name: Start test services
      run: |
        docker-compose -f docker-compose.test.yml up -d mongo-test redis-test
        sleep 10
    
    - name: Run tests with coverage
      run: |
        python tests/test_runner.py fast --html
      env:
        TESTING: true
        MONGODB_ATLAS_URI: mongodb://localhost:27018/test_h200
        REDIS_HOST: localhost
        REDIS_PORT: 6380
        REDIS_PASSWORD: test_password
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: |
          coverage.xml
          htmlcov/
    
    - name: Stop test services
      if: always()
      run: |
        docker-compose -f docker-compose.test.yml down

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    
    - name: Run performance tests (CPU only)
      run: |
        python tests/test_runner.py performance
      env:
        TESTING: true
        SKIP_GPU_TESTS: true
    
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: reports/

  docker-test:
    name: Docker Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build and test with Docker Compose
      run: |
        docker-compose -f docker-compose.test.yml build
        docker-compose -f docker-compose.test.yml up --abort-on-container-exit
    
    - name: Extract test results from container
      if: always()
      run: |
        docker-compose -f docker-compose.test.yml cp h200-test-runner:/app/reports ./reports
    
    - name: Upload Docker test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: docker-test-results
        path: reports/
    
    - name: Clean up
      if: always()
      run: |
        docker-compose -f docker-compose.test.yml down -v

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run bandit security scan
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
    
    - name: Run safety check
      run: |
        safety check --json --output safety-report.json || true
    
    - name: Upload security results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json